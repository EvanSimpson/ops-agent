# escape=`

ARG WINDOWS_VERSION=ltsc2019

#
# Builder Image - Windows Server Core
#
FROM mcr.microsoft.com/windows/servercore:$WINDOWS_VERSION as base

#
# Basic setup
#
RUN setx /M PATH "%PATH%;C:\BuildTools\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
RUN setx /M PATH "%PATH%;C:\WinFlexBison"
RUN setx /M PATH "%PATH%;C:\Go\bin"
RUN setx /M PATH "%PATH%;C:\Java\bin"

RUN setx /M JAVA_HOME "C:\Java"

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN Write-Host ('Creating folders'); `
    New-Item -Type Directory -Path /local; `
    New-Item -Type Directory -Path /work/out/bin; `
    New-Item -Type Directory -Path /work/out/config;

###############################################################################
# Install build prerequisites
###############################################################################

WORKDIR /local

#
# Install Visual Studio 2019
#
ADD https://aka.ms/vs/16/release/vs_buildtools.exe /local/vs_buildtools.exe
ADD https://aka.ms/vs/16/release/channel /local/VisualStudio.chman

RUN Start-Process /local/vs_buildtools.exe `
    -ArgumentList '--quiet ', '--wait ', '--norestart ', '--nocache', `
    '--installPath C:\BuildTools', `
    '--channelUri C:\local\VisualStudio.chman', `
    '--installChannelUri C:\local\VisualStudio.chman', `
    '--add Microsoft.VisualStudio.Workload.VCTools', `
    '--includeRecommended'  -NoNewWindow -Wait;

#
# Technique from https://github.com/StefanScherer/dockerfiles-windows/blob/master/mongo/3.6/Dockerfile
#
ADD https://aka.ms/vs/15/release/vc_redist.x64.exe /local/vc_redist.x64.exe

RUN Write-Host ('Installing Visual C++ Redistributable Package'); `
    Start-Process /local/vc_redist.x64.exe -ArgumentList '/install', '/quiet', '/norestart' -NoNewWindow -Wait; `
    Copy-Item -Path /Windows/System32/msvcp140.dll -Destination /work/out/bin/; `
    Copy-Item -Path /Windows/System32/vccorlib140.dll -Destination /work/out/bin/; `
    Copy-Item -Path /Windows/System32/vcruntime140.dll -Destination /work/out/bin/;

#
# Install OpenSSL
# This must be done after installing Visual Studio
#
ADD https://slproweb.com/download/Win64OpenSSL-1_1_1L.msi /local/Win64OpenSSL-1_1_1L.msi

# Verify SHA256 hash using expected value from https://github.com/slproweb/opensslhashes
RUN $ExpectedHash = '1e62e6459835f61c418532a1544e295be5400498b3569aadfb6d0b5d7a1c1dbc';`
    $ActualHash = $(Get-FileHash /local/Win64OpenSSL-1_1_1L.msi).Hash.ToLower();`
    if ($ActualHash -ne $ExpectedHash) {`
      throw \"OpenSSL hash mismatch. Expected: $ExpectedHash, Actual: $ActualHash\"`
    };`
    Start-Process msiexec.exe -Wait -ArgumentList '/i C:\local\Win64OpenSSL-1_1_1L.msi /quiet';

#
# Install winflexbison
#
ADD https://github.com/lexxmark/winflexbison/releases/download/v2.5.22/win_flex_bison-2.5.22.zip /local/win_flex_bison.zip

RUN Expand-Archive /local/win_flex_bison.zip -Destination /WinFlexBison; `
    Copy-Item -Path /WinFlexBison/win_bison.exe /WinFlexBison/bison.exe; `
    Copy-Item -Path /WinFlexBison/win_flex.exe /WinFlexBison/flex.exe;

###############################################################################
# Build fluent-bit
###############################################################################

FROM base as fluentbit

COPY submodules/fluent-bit /work/submodules/fluent-bit

WORKDIR /work/submodules/fluent-bit/build

RUN cmake -G "'Visual Studio 16 2019'" -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DFLB_OUT_KINESIS_STREAMS=OFF ../;

RUN cmake --build . --config Release; `
    Copy-Item -Path bin/Release/fluent-bit.exe -Destination /work/out/bin/; `
    Copy-Item -Path bin/Release/fluent-bit.dll -Destination /work/out/bin/;

###############################################################################
# Packaging
###############################################################################

FROM base as packaging

WORKDIR /work

COPY . /work

COPY --from=fluentbit /work/out /work/out
